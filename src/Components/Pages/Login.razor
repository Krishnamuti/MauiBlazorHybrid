@page "/login"
@using MauiHybridAuthentication.Authentication
@using MauiHybridAuthentication.Models
@using MauiHybridAuthentication.Repositories
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager navigationManager
@inject UserAccountRepository userAccountRepository
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager

<div class="container-fluid">
    <div class="row vh-100">
        <div class="col-md-6 d-none d-md-flex bg-image"></div>
        <div class="col-md-6 bg-light">
            <div class="login d-flex align-items-center py-5">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-10 col-xl-7 mx-auto">
                            <h3 class="display-4 mb-3">Welcome!</h3>
                            <p class="text-muted mb-4">Please enter your login credentials to access your account.</p>

                            @if (!string.IsNullOrWhiteSpace(errorMessage))
                            {
                                <div class="alert alert-danger d-flex align-items-center mb-4" role="alert">
                                    <i class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2"></i>
                                    <div>
                                        @errorMessage
                                    </div>
                                </div>
                            }

                            <EditForm Model="model" FormName="LoginForm" OnValidSubmit="OnSubmit">
                                <div class="form-group mb-3">
                                    <InputText @bind-Value="model.UserName" type="text" placeholder="Username" class="form-control rounded-pill border-0 shadow-sm px-4" />
                                </div>
                                <div class="form-group mb-3">
                                    <InputText @bind-Value="model.Password" type="password" placeholder="Password" class="form-control rounded-pill border-0 shadow-sm px-4 text-primary" />
                                </div>
                                <div class="custom-control custom-checkbox mb-3">
                                    <InputCheckbox id="rememberInput" @bind-Value="model.Remember" class="custom-control-input" />
                                    <label for="rememberInput" class="custom-control-label">Remember password</label>
                                </div>
                                <button type="submit" class="btn btn-primary btn-block text-uppercase mb-2 rounded-pill shadow-sm">Sign in</button>
                                <div class="text-center d-flex justify-content-between mt-4">
                                    <p>
                                        Don't have an account? <a href="./register" class="font-italic text-muted">
                                            <u>Register</u>
                                        </a>
                                    </p>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginModel model { get; set; } = new();

    private string? errorMessage;

    private async Task OnSubmit()
    {
        if(string.IsNullOrWhiteSpace(model.UserName) ||
            string.IsNullOrWhiteSpace(model.Password))
        {
            errorMessage = "Invalid Username or Password";
            return;    
        }

        var userAccount = await userAccountRepository.Get(model.UserName);
        if(userAccount is null || userAccount.Password != model.Password)
        {
            errorMessage = "Invalid Username or Password";
            return;
        }

        var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        await customAuthenticationStateProvider.UpdateAuthenticationState(new UserSession(userAccount.UserName,
            userAccount.Role), model.Remember);

        navigationManager.NavigateTo("/");
    }

    private class LoginModel
    {
        public string? UserName { get; set; }
        public string? Password { get; set; }
        public bool Remember { get; set; }
    }
}